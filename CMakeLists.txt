cmake_minimum_required(VERSION 2.8)
project(larpr)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/Modules/")

option(BUILD_SHARED_LIBS "Build as shared library" ON)
option(BUILD_STATIC_LIBS "Build as static library" OFF)
option(EMINIZ "Use extern miniz module" OFF)

if (EMINIZ)
    message(STATUS "Use extern miniz module")
    add_definitions(-DUSE_EXTERN_MINIZ)
    set(SRC_LARPR larpr.c ./deps/compat-5.3/c-api/compat-5.3.c)
else()
    set(SRC_LARPR larpr.c ./deps/miniz/miniz.c ./deps/compat-5.3/c-api/compat-5.3.c)
endif()

if (BUILD_SHARED_LIBS)
    add_library(larpr SHARED ${SRC_LARPR})
    if(MSVC)
        target_link_libraries(larpr "/DEF:${PROJECT_SOURCE_DIR}/sym/larpr.def /NODEFAULTLIB")
    else()
        target_link_libraries(larpr -Wl,--retain-symbols-file=${PROJECT_SOURCE_DIR}/sym/larpr.sym)
        target_link_libraries(larpr -Wl,--version-script=${PROJECT_SOURCE_DIR}/sym/larpr.map)
    endif()
endif()
if (BUILD_STATIC_LIBS)
    add_library(larpr STATIC ${SRC})
endif()
set_target_properties(larpr PROPERTIES PREFIX "")

set(SRC_CONTAINER container.c ./deps/compat-5.3/c-api/compat-5.3.c)
add_executable(container ${SRC_CONTAINER})
target_link_libraries(container larpr)
target_link_libraries(container ${LUA_LIBRARIES})
if (UNIX)
	target_link_libraries(container dl)
endif()

find_package(LuaJIT)
if (LUAJIT_FOUND)
    include_directories(${LUAJIT_INCLUDE_DIR} .)
	if (WIN32)
		target_link_libraries(larpr ${LUAJIT_LIBRARIES})
	endif()
	target_link_libraries(container ${LUAJIT_LIBRARIES})
else()
    find_package(Lua REQUIRED)
    include_directories(${LUA_INCLUDE_DIR} .)
	if (WIN32)
		target_link_libraries(larpr ${LUA_LIBRARIES})
	endif()
	target_link_libraries(container ${LUA_LIBRARIES})
endif()
